// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma_client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  MOVIE
  GAME
  MANGA
}

enum NotificationType {
  NEW_RECOMMENDATION
  MEDIA_UPDATE
  LIST_ITEM_ADDED
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  username        String           @unique
  password        String
  firstName       String?
  lastName        String?
  avatar          String?
  bio             String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isActive        Boolean          @default(true)
  ratings         Rating[]
  lists           UserList[]
  recommendations Recommendation[] @relation("UserRecommendations")
  notifications   Notification[]
  refreshTokens   RefreshToken[]
  preferences     UserPreference?
}

model UserPreference {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferredGenres String[]
  dislikedGenres  String[]
  minRating       Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Media {
  id              String           @id @default(uuid())
  title           String
  description     String
  releaseDate     DateTime
  mediaType       MediaType
  genres          String[]
  coverImage      String?
  backgroundImage String?
  creator         String?
  duration        Int? // Minutes for movies, estimated hours for games
  chapters        Int? // For manga
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ratings         Rating[]
  lists           ListItem[]
  recommendations Recommendation[] @relation("MediaRecommendations")

  @@index([mediaType])
  @@index([genres])
}

model Rating {
  id        String   @id @default(uuid())
  userId    String
  mediaId   String
  score     Float // 1-10 rating
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
  @@index([userId])
  @@index([mediaId])
}

model UserList {
  id          String     @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean    @default(true)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       ListItem[]

  @@index([userId])
}

model ListItem {
  id        String   @id @default(uuid())
  listId    String
  mediaId   String
  note      String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list      UserList @relation(fields: [listId], references: [id], onDelete: Cascade)
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([listId, mediaId])
  @@index([listId])
  @@index([mediaId])
}

model Recommendation {
  id        String   @id @default(uuid())
  userId    String
  mediaId   String
  score     Float // Recommendation strength (0-1)
  reason    String?
  isViewed  Boolean  @default(false)
  isSaved   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserRecommendations", fields: [userId], references: [id], onDelete: Cascade)
  media     Media    @relation("MediaRecommendations", fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
  @@index([userId])
  @@index([mediaId])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
